---
- hosts: 127.0.0.1
  connection: local
  vars_files:
    - ./config.yml

  tasks:

    # Extend fs.inotify.max_user_watches value.
    # @see https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit
    - name: "Extend echo fs.inotify.max_user_watches"
      become: yes
      command: 'echo "fs.inotify.max_user_watches = 524288" | sudo tee -a /etc/sysctl.conf && sudo sysctl -p'

    # Copy home directory.
    - name: "Copy `home` directory from repo to user's home directoriy"
      copy:
        src: './home/'
        dest: '$HOME'
        backup: no # Do not make backup copies of files.
        force: yes

    # Install ZSH + Antigen.
    - name: 'Install zsh package'
      become: true
      apt:
        name: zsh
    - name: 'Make ~/.antigen directory'
      file:
        path: $HOME/.antigen
        state: directory
    - name: 'Download Antigen'
      get_url:
        url: https://git.io/antigen
        dest: $HOME/.antigen/antigen.zsh
    - name: 'Make zsh as a default shell'
      become: true
      command: 'chsh -s /bin/zsh'

    # By default zsh is not inheriting any bash profile settings which may lead,
    # for example, to missing snap apps in main menu.
    # @see https://askubuntu.com/questions/910821/programs-installed-via-snap-not-showing-up-in-launcher#answer-989485
    - name: Make sure that /etc/profile is loaded in /etc/zsh/zprofile
      become: yes
      lineinfile:
        path: /etc/zsh/zprofile
        line: 'emulate sh -c "source /etc/profile"'
        create: yes

    # Install apps.
    - name: 'Install DEB packages' # Run deb installation first as deb packages can add apt repos.
      become: yes
      loop: '{{ apps.deb }}'
      apt:
        deb: '{{ item }}'
    - name: 'Add apt keys'
      become: yes
      loop: '{{ apps.repos }}'
      apt_key:
        url: '{{ item.gpg }}'
      when: item.gpg is defined
    - name: 'Add PPA repositories'
      become: yes
      loop: '{{ apps.repos }}'
      apt_repository:
        repo: '{{ item.repo }}'
        filename: '{{ item.filename }}'
        state: present
        update_cache: no
    # Linux Mint 20 has disabled snaps. For enabling snapd its required to
    # remove /etc/apt/preferences.d/nosnap.pref file.
    # @see https://www.omgubuntu.co.uk/2020/06/enable-snap-apps-linux-mint-20 
    - name: 'Make sure that nosnap.pref file is removed'
      become: yes
      file:
        path: /etc/apt/preferences.d/nosnap.pref
        state: absent
    - name: 'Update APT cache'
      become: yes
      apt:
        update_cache: yes
    - name: 'Install packages'
      become: yes
      apt:
        pkg: '{{ apps.apt }}'
        state: present
        update_cache: no
    - name: 'Make sure snapd is installed'
      become: yes
      apt:
        pkg: snapd
        state: present
        update_cache: no
    - name: 'Install snap packages'
      become: yes
      loop: '{{ apps.snap }}'
      snap:
        name: '{{ item }}'
        classic: yes
        channel: stable
        state: present

    # Install PHP + Composer + Composer packages.
    - name: 'Install PHP packages'
      become: yes
      apt:
        name:
          - php{{ php.version }}-common
          - php{{ php.version }}-cli
          - php{{ php.version }}-curl
          - php{{ php.version }}-gd
          - php{{ php.version }}-json
          - php{{ php.version }}-mbstring
          - php{{ php.version }}-mysql
          - php{{ php.version }}-opcache
          - php{{ php.version }}-xml
          - php{{ php.version }}-zip
      when: php.install|bool
    - name: 'Download composer'
      get_url:
        url: https://getcomposer.org/composer-stable.phar
        dest: $HOME/.local/bin/composer
        mode: '0755'
      when: php.install|bool
    - name: 'Create ~/.composer if it does not exist'
      file:
        path: $HOME/.composer
        state: directory
      when: php.install|bool
    - name: 'Install global composer package: "cgr/consolidation"'
      command: composer global require consolidation/cgr
    - name: 'Require global composer packages using "cgr"'
      command: cgr {{ php.composer.global | join(' ') }}
      when: php.install|bool
    - name: 'Enable Drupal PHPCS standard'
      file:
        state: link
        src: $HOME/.composer/vendor/drupal/coder/coder_sniffer/Drupal
        dest: $HOME/.composer/vendor/squizlabs/php_codesniffer/src/Standards/Drupal
      when: php.install|bool and 'drupal/coder' in php.composer.global
    - name: 'Enable DrupalPractice PHPCS standard'
      file:
        state: link
        src: $HOME/.composer/vendor/drupal/coder/coder_sniffer/DrupalPractice
        dest: $HOME/.composer/vendor/squizlabs/php_codesniffer/src/Standards/DrupalPractice
      when: php.install|bool and 'drupal/coder' in php.composer.global

    # Install Node.js + npm packages.
    - name: 'Make sure that "nodejs" package is removed'
      become: yes
      apt:
        name: nodejs
        state: absent
    - name: 'Install NVM'
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
      when: node.install|bool
    - name: 'Install node via NVM'
      command: bash -c "source $HOME/.profile && nvm install {{ node.version }} && nvm use {{ node.version }}"
      when: node.install|bool
    - name: 'Install global NPM packages' # Assuming zsh-nvm bundle is added.
      command: bash -c "source $HOME/.profile && npm install -g {{ node.npm.global | join(' ') }}"
      when: node.install|bool

    # Install python and pip3 packages.
    - name: 'Install Python packages'
      become: yes
      apt:
        name:
          - python3-pip
          - python{{ python.version }}
          - python{{ python.version }}-dev
          - python{{ python.version }}-doc
          - python{{ python.version }}-minimal
      when: python.install|bool
    - name: 'Require global python3 packages'
      command: pip3 install --user {{ python.pip3.global | join(' ') }}
      when: python.install|bool

    # Install and configure vscode.
    - name: 'Install Visual Studio Code...'
      become: yes
      apt:
        name: code
        state: latest
      when: vscode.install|bool
    - name: 'Install code extensions...'
      loop: '{{ vscode.plugins }}'
      command: 'code --install-extension {{ item }}'
      when: vscode.install|bool
      # Assume that not all extensions available to download. Some extensions
      # may be either removed or renamed.
      ignore_errors: yes

    # Install docker.
    - name: 'Install Docker packages'
      become: yes
      apt:
        pkg:
          - docker-ce
          - docker-compose
    - name: 'Move Docker directory to ~/.docker'
      become: yes
      copy:
        content: |
          {
            "graph": "/home/{{ ansible_facts.user_id }}/.docker"
          }
        dest: /etc/docker/daemon.json
        owner: '{{ ansible_facts.user_id }}'
        group : '{{ ansible_facts.user_id }}'
        mode: 755
    - name: 'Start Docker service on system boot'
      become: yes
      service:
        name: docker
        enabled: yes
    - name: 'Restart Docker service'
      become: yes
      service:
        name: docker
        state: restarted

    # Install Docksal.
    - name: 'Install Docksal'
      shell: >
        curl -o- https://get.docksal.io | bash
      environment:
        DOCKSAL_CONFIRM_YES: 1 # Force answer "y" to all y/n Docksal questions.  
      args:
        creates: "/usr/local/bin/fin"
